// Function to compute the amount of sales in a given time INTERVAL

DELIMITER $$
CREATE FUNCTION compute_sales_amount (prevDateTime DATETIME, nextDateTime DATETIME) 
RETURNS INT
DETERMINISTIC
BEGIN 
	DECLARE sales_amount INT;
	SET sales_amount = 0;

	SELECT COUNT(*) INTO sales_amount
	FROM sale 
	WHERE prevDateTime <= date_time AND date_time <= nextDateTime;

	RETURN sales_amount;
END$$
DELIMITER ;

// Function to compute the amount of a given sale in a given time INTERVAL

DELIMITER $$
CREATE FUNCTION compute_sales_details_on_day (date DATE) 
RETURNS DOUBLE
DETERMINISTIC
BEGIN 
	SET @sales_amount_on_day := (SELECT SUM(daySalesQuery.sale_total_amount)
	FROM
		(SELECT SUM(sp.quantity*product.price) as sale_total_amount 
		FROM sale_product sp 
		LEFT JOIN product ON sp.product = product.id 
		LEFT JOIN sale s ON sp.sale = s.id 
		LEFT JOIN customer c ON s.customer = c.id 
		WHERE DATE(s.date_time) = date
		GROUP BY sp.sale) AS daySalesQuery);

	RETURN @sales_amount_on_day;
END$$
DELIMITER ;

// Example Function

DELIMITER $$
CREATE FUNCTION example_function (date DATE) 
RETURNS DOUBLE
DETERMINISTIC
BEGIN 
	SET @answer := -1;
	RETURN @answer;
END$$
DELIMITER ;